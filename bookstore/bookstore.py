# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\diges\python\bookstore.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# -*- coding: utf-8 -*-
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3
from PyQt5.QtWidgets import QMessageBox

class Ui_MainForm(object):
    def setupUi(self, MainForm):
        MainForm.setObjectName("MainForm")
        MainForm.resize(400, 406)
        self.gridLayout = QtWidgets.QGridLayout(MainForm)
        self.gridLayout.setObjectName("gridLayout")

        # Book title input
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.BookLabel = QtWidgets.QLabel(MainForm)
        self.BookLabel.setText("Book Title:")
        self.horizontalLayout.addWidget(self.BookLabel)
        self.TitleTextbox = QtWidgets.QLineEdit(MainForm)
        self.horizontalLayout.addWidget(self.TitleTextbox)
        self.FindPriceButton = QtWidgets.QPushButton(MainForm)
        self.FindPriceButton.setText("Find Price")
        self.horizontalLayout.addWidget(self.FindPriceButton)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)

        # Price display
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.PriceLabel = QtWidgets.QLabel(MainForm)
        self.PriceLabel.setText("Price:")
        self.horizontalLayout_2.addWidget(self.PriceLabel)
        self.PriceResultLabel = QtWidgets.QLabel(MainForm)
        self.PriceResultLabel.setText("Rs. 0")
        self.horizontalLayout_2.addWidget(self.PriceResultLabel)
        self.gridLayout.addLayout(self.horizontalLayout_2, 1, 0, 1, 1)

        # Separator
        self.line = QtWidgets.QFrame(MainForm)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.gridLayout.addWidget(self.line, 2, 0, 1, 1)

        # Quantity input
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.QtyLabel = QtWidgets.QLabel(MainForm)
        self.QtyLabel.setText("Quantity:")
        self.horizontalLayout_3.addWidget(self.QtyLabel)
        self.QtyTextbox = QtWidgets.QLineEdit(MainForm)
        self.QtyTextbox.setValidator(QtGui.QIntValidator())  # Accept only integers
        self.horizontalLayout_3.addWidget(self.QtyTextbox)
        self.FindTotalButton = QtWidgets.QPushButton(MainForm)
        self.FindTotalButton.setText("Find Total")
        self.horizontalLayout_3.addWidget(self.FindTotalButton)
        self.gridLayout.addLayout(self.horizontalLayout_3, 3, 0, 1, 1)

        # Total display
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.TotalLabel = QtWidgets.QLabel(MainForm)
        self.TotalLabel.setText("Total:")
        self.horizontalLayout_4.addWidget(self.TotalLabel)
        self.ResultTotalLabel = QtWidgets.QLabel(MainForm)
        self.ResultTotalLabel.setText("Rs. 0")
        self.horizontalLayout_4.addWidget(self.ResultTotalLabel)
        self.gridLayout.addLayout(self.horizontalLayout_4, 4, 0, 1, 1)

        # Connect button actions
        self.FindPriceButton.clicked.connect(self.find_price)
        self.FindTotalButton.clicked.connect(self.find_total)

    def find_price(self):
        title = self.TitleTextbox.text().strip()
        if not title:
            QMessageBox.warning(None, "Input Error", "Please enter a book title.")
            return

        try:
            conn = sqlite3.connect(r"C:\Users\diges\booktest.db")
            cur = conn.cursor()
            cur.execute("SELECT price FROM book WHERE title=?", (title,))
            result = cur.fetchone()
            conn.close()
            if result:
                self.PriceResultLabel.setText(f"Rs. {result[0]}")
            else:
                QMessageBox.information(None, "Not Found", "Book not found.")
                self.PriceResultLabel.setText("Rs. 0")
        except Exception as e:
            QMessageBox.critical(None, "Database Error", str(e))

    def find_total(self):
        
        try:
            # Remove "Rs." and strip spaces
            price_text = self.PriceResultLabel.text().replace("Rs.", "").strip()
            qty_text = self.QtyTextbox.text().strip()

            # Convert price to float (supports decimals like 475.5)
            try:
                price = float(price_text)
            except ValueError:
                QMessageBox.warning(None, "Error", "Please find the book price first.")
                return

            # Validate quantity (must be positive integer)
            if not qty_text.isdigit() or int(qty_text) <= 0:
                QMessageBox.warning(None, "Error", "Please enter a valid quantity.")
                return

            qty = int(qty_text)
            total = price * qty
            self.ResultTotalLabel.setText(f"Rs. {total:.2f}")  # show 2 decimals

        except Exception as e:
            QMessageBox.critical(None, "Calculation Error", str(e))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainForm = QtWidgets.QWidget()
    ui = Ui_MainForm()
    ui.setupUi(MainForm)
    MainForm.setWindowTitle("Bookstore App")
    MainForm.show()
    sys.exit(app.exec_())

