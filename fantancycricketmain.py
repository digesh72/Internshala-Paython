# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fantancycricketmain.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QInputDialog, QMessageBox
import sqlite3


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label, 0, QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.PointsBatsmen = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        self.PointsBatsmen.setFont(font)
        self.PointsBatsmen.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.PointsBatsmen.setFrameShadow(QtWidgets.QFrame.Plain)
        self.PointsBatsmen.setObjectName("PointsBatsmen")
        self.horizontalLayout.addWidget(self.PointsBatsmen, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.PointsBowler = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        self.PointsBowler.setFont(font)
        self.PointsBowler.setObjectName("PointsBowler")
        self.horizontalLayout.addWidget(self.PointsBowler, 0, QtCore.Qt.AlignHCenter)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout.addWidget(self.label_5)
        self.PointsAr = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.PointsAr.setFont(font)
        self.PointsAr.setObjectName("PointsAr")
        self.horizontalLayout.addWidget(self.PointsAr, 0, QtCore.Qt.AlignHCenter)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)
        self.PointsWk = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.PointsWk.setFont(font)
        self.PointsWk.setObjectName("PointsWk")
        self.horizontalLayout.addWidget(self.PointsWk, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.verticalLayout_5.addLayout(self.verticalLayout_2)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_5.addWidget(self.line)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_2.addWidget(self.label_9)
        self.PointsShow = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.PointsShow.setFont(font)
        self.PointsShow.setObjectName("PointsShow")
        self.horizontalLayout_2.addWidget(self.PointsShow, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.RadioBat = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.RadioBat.setFont(font)
        self.RadioBat.setObjectName("RadioBat")
        self.horizontalLayout_3.addWidget(self.RadioBat)
        self.RadioBow = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.RadioBow.setFont(font)
        self.RadioBow.setObjectName("RadioBow")
        self.horizontalLayout_3.addWidget(self.RadioBow)
        self.RadioAr = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.RadioAr.setFont(font)
        self.RadioAr.setObjectName("RadioAr")
        self.horizontalLayout_3.addWidget(self.RadioAr)
        self.RadioWk = QtWidgets.QRadioButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.RadioWk.setFont(font)
        self.RadioWk.setObjectName("RadioWk")
        self.horizontalLayout_3.addWidget(self.RadioWk)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout_3.addWidget(self.listWidget)
        self.horizontalLayout_6.addLayout(self.verticalLayout_3)
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_6.addWidget(self.label_13, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_4.addWidget(self.label_10)
        self.ResultPointsUsed = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ResultPointsUsed.setFont(font)
        self.ResultPointsUsed.setObjectName("ResultPointsUsed")
        self.horizontalLayout_4.addWidget(self.ResultPointsUsed, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_5.addWidget(self.label_12)
        self.ResultTeamName = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ResultTeamName.setFont(font)
        self.ResultTeamName.setObjectName("ResultTeamName")
        self.horizontalLayout_5.addWidget(self.ResultTeamName, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout_4.addLayout(self.horizontalLayout_5)
        self.listWidget_2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget_2.setObjectName("listWidget_2")
        self.verticalLayout_4.addWidget(self.listWidget_2)
        self.horizontalLayout_6.addLayout(self.verticalLayout_4)
        self.verticalLayout_5.addLayout(self.horizontalLayout_6)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW_Team = QtWidgets.QAction(MainWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.menuManage_Teams.addAction(self.actionNEW_Team)
        self.menuManage_Teams.addAction(self.actionOPEN_Team)
        self.menuManage_Teams.addAction(self.actionSAVE_Team)
        self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
        self.menubar.addAction(self.menuManage_Teams.menuAction())
        self.RadioBat.toggled.connect(self.radio_check)
        self.RadioBow.toggled.connect(self.radio_check)
        self.RadioAr.toggled.connect(self.radio_check)
        self.RadioWk.toggled.connect(self.radio_check)

        self.listWidget.itemDoubleClicked.connect(self.list_Click)
        self.listWidget_2.itemDoubleClicked.connect(self.removelist2)
        
        self.actionNEW_Team.triggered.connect(lambda: self.menufunction(self.actionNEW_Team))
        self.actionOPEN_Team.triggered.connect(lambda: self.menufunction(self.actionOPEN_Team))
        self.actionSAVE_Team.triggered.connect(lambda: self.menufunction(self.actionSAVE_Team))
        self.actionEVALUATE_Team.triggered.connect(lambda: self.menufunction(self.actionEVALUATE_Team))

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantancy Cricket"))
        self.label.setText(_translate("MainWindow", "Your Selection"))
        self.label_2.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.PointsBatsmen.setText(_translate("MainWindow", "0"))
        self.label_3.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.PointsBowler.setText(_translate("MainWindow", "0"))
        self.label_5.setText(_translate("MainWindow", "Allrounder(AR)"))
        self.PointsAr.setText(_translate("MainWindow", "0"))
        self.label_7.setText(_translate("MainWindow", "Wicket-keeper(WK)"))
        self.PointsWk.setText(_translate("MainWindow", "0"))
        self.label_9.setText(_translate("MainWindow", "Points Available:"))
        self.PointsShow.setText(_translate("MainWindow", "1000"))
        self.RadioBat.setText(_translate("MainWindow", "BAT"))
        self.RadioBow.setText(_translate("MainWindow", "BOW"))
        self.RadioAr.setText(_translate("MainWindow", "AR"))
        self.RadioWk.setText(_translate("MainWindow", "WK"))
        self.label_13.setText(_translate("MainWindow", ">"))
        self.label_10.setText(_translate("MainWindow", "Points Used:"))
        self.ResultPointsUsed.setText(_translate("MainWindow", "0"))
        self.label_12.setText(_translate("MainWindow", "Team Name:"))
        self.ResultTeamName.setText(_translate("MainWindow", "Team_Name"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))

    def menufunction(self,action):
        txt = action.text()
        if txt == "NEW Team":
            self.reset()
            text, ok = QInputDialog.getText(None, 'Fantasy Cricket Game', 'Enter Name Of Team')
            if ok and text.strip():
                self.ResultTeamName.setText(text.strip())
        elif txt == "SAVE Team":
            self.validate_and_save()
        elif txt == "OPEN Team":
            self.reset()
            self.open_Team()
        elif txt == "EVALUATE Team":
            try:
                from calculatescore import Ui_Dialog
                dialog = QtWidgets.QDialog()
                ui = Ui_Dialog()
                ui.setupUi(dialog)
                dialog.exec_()
            except Exception as e:
                self.showdlg(f"Error opening Evaluate Team: {e}")

                
    def showdlg(self, msg):
        dlg = QMessageBox()
        dlg.setWindowTitle("Fantasy Cricket")
        dlg.setText(msg)
        dlg.setIcon(QMessageBox.Information)
        dlg.exec_()
            


    def reset(self):
        self._suppress_radio_handler = True
        try:
            self.PointsBatsmen.setText("0")
            self.PointsBowler.setText("0")
            self.PointsAr.setText("0")
            self.PointsWk.setText("0")
            self.PointsShow.setText("1000")
            self.ResultPointsUsed.setText("0")
            self.ResultTeamName.setText("Team_Name")
            self.listWidget.clear()
            self.listWidget_2.clear()

            for rb in (self.RadioBat, self.RadioBow, self.RadioAr, self.RadioWk):
                rb.blockSignals(True)
                rb.setChecked(False)
                rb.blockSignals(False)
        finally:
            self._suppress_radio_handler = False

    def validate_and_save(self):
        total_players = self.listWidget_2.count()
        bat_count = int(self.PointsBatsmen.text())
        bow_count = int(self.PointsBowler.text())
        ar_count = int(self.PointsAr.text())
        wk_count = int(self.PointsWk.text())

        if total_players != 11:
            self.showdlg("Team must have exactly 11 players.")
            return

        if bat_count > 5 or bow_count > 5 or ar_count > 3 or wk_count > 1:
            self.showdlg("Category limits exceeded.")
            return

        if wk_count != 1:
            self.showdlg("Team must include exactly 1 Wicket-Keeper.")
            return

        if bat_count < 1 or bow_count < 1 or ar_count < 1:
            self.showdlg("Team must include at least 1 BAT, 1 BOW and 1 AR.")
            return

        team_name = self.ResultTeamName.text()

        if team_name == "Team_Name":
            self.showdlg("Please enter a team name before saving.")
            return

        players = []
        total_value = 0
        for i in range(self.listWidget_2.count()):
            item = self.listWidget_2.item(i)
            player = item.text()
            value, category = item.data(QtCore.Qt.UserRole)
            players.append(player)
            total_value += int(value)
            
        players_str = ",".join(players)
        
        conn = sqlite3.connect(r"D:\pythonfinal\fantasy")
        cur = conn.cursor()

        cur.execute("DELETE FROM teams WHERE name=?",(team_name,))
        cur.execute("INSERT INTO teams (name,players, value) VALUES (?, ?, ?)", (team_name, players_str, total_value))

        conn.commit()
        conn.close()
        self.showdlg(f"Team '{team_name}' saved successfully!")

    def open_Team(self):
        team_name, ok = QInputDialog.getText(None, "Open Team", "Enter Team Name")
        if not ok or not team_name.strip():
            return

        conn = sqlite3.connect(r"D:\pythonfinal\fantasy")
        cur = conn.cursor()
        cur.execute("SELECT players, value FROM teams WHERE name=?", (team_name.strip(),))
        rows = cur.fetchone()
        conn.close()

        if not rows:
            self.showdlg("No team found with this name.")
            return

        players_str, total_value = rows
        players = players_str.split(",")

        self.ResultTeamName.setText(team_name.strip())
        self.listWidget_2.clear()

        conn = sqlite3.connect(r"D:\pythonfinal\fantasy")
        c2 = conn.cursor()
        total_points = 0

        for player in players:
            player = player.strip()
            c2.execute("SELECT value, ctg FROM stats WHERE player=?", (player,))
            result = c2.fetchone()
            if result:
                value, ctg = result
                item = QtWidgets.QListWidgetItem(player)
                item.setData(QtCore.Qt.UserRole, (value, ctg))
                self.listWidget_2.addItem(item)
                total_points += value
                
        conn.close()
        self.ResultPointsUsed.setText(str(total_points))
        self.PointsShow.setText(str(1000 - total_points))

    
    def radio_check(self):
        if self._suppress_radio_handler:
            return
        
        if self.ResultTeamName.text()== 'Team_Name':
            self.showdlg('Enter name of team.')
            return
        
        
        
        ctgr = ''
        if self.RadioBat.isChecked():
            ctgr = 'BAT'
        elif self.RadioBow.isChecked():
            ctgr = 'BOW'    
        elif self.RadioAr.isChecked():
            ctgr = 'AR'    
        elif self.RadioWk.isChecked():
            ctgr = 'WK'

        self.listWidget.clear()

        if not ctgr:
            return

        try:
            conn = sqlite3.connect(r"D:\pythonfinal\fantasy")
            cur = conn.cursor()
            cur.execute("SELECT player, value, ctg FROM stats WHERE ctg=?", (ctgr,))
            for player, value, ctg in cur.fetchall():
                item = QtWidgets.QListWidgetItem(player)
                item.setData(QtCore.Qt.UserRole, (value, ctg))
                self.listWidget.addItem(item)
        except Exception as e:
            self.showdlg(f"Error leading players: {e}")
        finally:
            try:
                conn.close()
            except:
                pass

        
    def update_category_count(self, category, delta):
        labels = {
            'BAT': self.PointsBatsmen,
            'BOW': self.PointsBowler,
            'AR': self.PointsAr,
            'WK': self.PointsWk
        }
        lab = labels.get(category)
        if lab:
            current = int(lab.text())
            lab.setText(str(current + delta))

                
    def list_Click(self, item):
        player = item.text()
        value, category = item.data(QtCore.Qt.UserRole)
        value = int(value)

        if self.listWidget_2.count() >= 11:
            self.showdlg("Your cannot more than 11 players.")
            return

        bat_count = int(self.PointsBatsmen.text())
        bow_count = int(self.PointsBowler.text())
        ar_count = int(self.PointsAr.text())
        wk_count = int(self.PointsWk.text())

        if category == "BAT" and bat_count >= 5:
            self.showdlg("Maximu 5 Batsmen allowed.")
            return
        if category == "BOW" and bow_count >= 5:
            self.showdlg("Maximum 5 Bowlers allowed.")
            return
        if category == "AR" and ar_count >= 3:
            self.showdlg("Maximux 3 Allrounders allowed.")
            return
        if category == "WK" and wk_count >= 1:
            self.showdlg("Only 1 Wicket-Keeper alloeed.")
            return
        
        available = int(self.PointsShow.text())
        used = int(self.ResultPointsUsed.text())

        if available < value:
            self.showdlg("Not enough points to add this player.")
            return
        
        self.PointsShow.setText(str(available-value))
        self.ResultPointsUsed.setText(str(used + value))

        self.update_category_count(category, +1)

        new_item = QtWidgets.QListWidgetItem(player)
        new_item.setData(QtCore.Qt.UserRole,(value, category))
        self.listWidget_2.addItem(new_item)

    def removelist2(self, item):
        player = item.text()
        value, category = item.data(QtCore.Qt.UserRole)
        

        available = int(self.PointsShow.text())
        used = int(self.ResultPointsUsed.text())

        self.PointsShow.setText(str(available + value))
        self.ResultPointsUsed.setText(str(used - value))

        self.update_category_count(category, -1)

        new_item = QtWidgets.QListWidgetItem(player)
        new_item.setData(QtCore.Qt.UserRole, (value, category))
        self.listWidget.addItem(new_item)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
